generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
    @@index([userId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@index([userId])
}

enum Role {
    OWNER
    CONTRIBUTOR
    READER
}

model User {
    id                   String                 @id @default(cuid())
    name                 String
    email                String                 @unique
    emailVerified        DateTime?
    image                String?
    accounts             Account[]
    sessions             Session[]
    budgetAccess         BudgetAccess[]
    transactions         Transaction[]
    RecurringTransaction RecurringTransaction[]
    Notification         Notification[]
}

model Document {
    id            String      @id @default(cuid())
    transactionId String
    transaction   Transaction @relation(fields: [transactionId], references: [id])
    url           String

    @@index([transactionId])
}

model Notification {
    id        String   @id @default(cuid())
    userId    String
    user      User     @relation(fields: [userId], references: [id])
    message   String
    createdAt DateTime
    read      Boolean  @default(false)

    @@index([userId])
}

model Budget {
    id           String             @id @default(cuid())
    name         String
    description  String?
    invitations  BudgetInvitation[]
    categories   Category[]
    budgetAccess BudgetAccess[]
    Transaction  Transaction[]

    @@index([name])
}

model BudgetInvitation {
    id         String   @id @default(cuid())
    budgetId   String
    budget     Budget   @relation(fields: [budgetId], references: [id])
    email      String
    inviteCode String   @unique
    createdAt  DateTime @default(now())
    expiresAt  DateTime
    maxUses    Int      @default(1)
    usedCount  Int      @default(0)

    @@index([budgetId])
}

model BudgetAccess {
    id       String @id @default(cuid())
    userId   String
    user     User   @relation(fields: [userId], references: [id])
    budgetId String
    budget   Budget @relation(fields: [budgetId], references: [id])
    role     Role

    @@unique([userId, budgetId])
    @@index([budgetId])
    @@index([userId])
}

model Category {
    id                   String                 @id @default(cuid())
    name                 String
    parentCategoryId     String?
    parentCategory       Category?              @relation("SubCategory", fields: [parentCategoryId], references: [id])
    subCategories        Category[]             @relation("SubCategory")
    budgetId             String
    budget               Budget                 @relation(fields: [budgetId], references: [id])
    transactions         Transaction[]
    RecurringTransaction RecurringTransaction[]

    @@index([name])
    @@index([budgetId])
    @@index([parentCategoryId])
}

model RecurringTransaction {
    id         String   @id @default(cuid())
    amount     Float
    startDate  DateTime
    frequency  String
    categoryId String
    category   Category @relation(fields: [categoryId], references: [id])
    userId     String
    user       User     @relation(fields: [userId], references: [id])

    @@index([categoryId])
    @@index([userId])
}

model Transaction {
    id         String     @id @default(cuid())
    amount     Float
    date       DateTime
    categoryId String?
    category   Category?  @relation(fields: [categoryId], references: [id])
    budgetId   String
    budget     Budget     @relation(fields: [budgetId], references: [id])
    userId     String
    user       User       @relation(fields: [userId], references: [id])
    Document   Document[]

    @@index([date])
    @@index([categoryId, date])
    @@index([budgetId])
    @@index([userId])
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}
